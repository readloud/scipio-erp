<?xml version="1.0" encoding="UTF-8"?>
<!--
This file is subject to the terms and conditions defined in the
files 'LICENSE' and 'NOTICE', which are part of this source
code package.
-->

<project name="SCIPIO ERP - Build Tools" default="jar" basedir=".">
    
    <!-- SCIPIO: 2017-01-17: Assembles a small build tools jar
        that can run independently from the ofbiz jars.
        This is forcefully needed for some cases such as clean tasks.
        Invoke using "ant build-scipio-build-tools" in main project. 
        TODO?: could try to refactor into own directory. -->
    
    <!-- we need to reuse build.xml definitions...
    <import file="../../common.xml"/>-->
    <!-- ofbiz.home.dir, normally inherited or set through common.xml/macros.xml -->
    <dirname property="scipio.comp.buildtools.dir" file="${ant.file.SCIPIO ERP - Build Tools}"/>
    <property name="ofbiz.home.dir2" location="${scipio.comp.buildtools.dir}/../.."/>

    <!-- ================================================================== -->
    <!-- Initialization of all property settings                            -->
    <!-- ================================================================== -->

    <property name="desc" value="Scipio Build Tools"/>
    <property name="name" value="scipio-build-tools"/>
    
    <!-- NOTE: this must be included AFTER property defs -->
    <import file="build.xml"/>
    
    <!-- FIXME: this include list is only affecting the class compilation, NOT the jar packaging, such
        that the tools JAR ends up with extra garbage classes after a few global builds...
        does not yet cause issues but probably will at some point... -->
    <patternset id="src.inc.set">
      <include name="com/ilscipio/scipio/ce/build/**/*.java"/>
    </patternset>
    
    <path id="local.class.path">
        <fileset dir="${lib.dir}" includes="*.jar"/>
        <fileset dir="${lib.dir}/commons" includes="*.jar"/>
        <fileset dir="${lib.dir}/j2eespecs" includes="*.jar"/>
        <fileset dir="${lib.dir}/scripting" includes="*.jar"/>
    </path>

    <target name="jar" depends="classes">
        <main-jar />
    </target>
    
    <!-- SPECIAL: PREVENT ivy from running - we don't need the dependencies,  
        and getting them makes clean tasks too heavy -->
    <target name="lib-update">
    </target>
    
</project>
