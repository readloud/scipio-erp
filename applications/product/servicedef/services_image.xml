<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
  -->

<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/services.xsd">
    <description>SCIPIO: New Product Image Services</description>
    <!-- NOTE: old image services are in services.xml -->
    <vendor>Ilscipio GmbH</vendor>

    <!-- SCIPIO: WARN: some of these services contain security-sensitive parameters
        and should not be called directly as controller events (assume all except where otherwise noted) -->

    <service name="productImageFileScaleInAllSize" engine="java"
            location="org.ofbiz.product.image.ProductImageServices" invoke="productImageFileScaleInAllSize" auth="false">
        <description>Scales a product image file according to size types in product config ImageProperties.xml and using filename formats from catalog.properties</description>
        <!-- INPUT IMAGE -->
        <attribute name="imageOrigPath" mode="IN" type="String" optional="true">
            <description>Full path of original image in filesystem as input (alternative to imageOrigUrl; if neither specified, auto-determines an original filename under imageServerPath); also supports component:// and file:// prefixes</description>
        </attribute>
        <attribute name="imageOrigUrl" mode="IN" type="String" optional="true">
            <description>URL of image relative to server root of original image in filesystem as input; WARN: 2017-07-04: MUST start with imageUrlPrefix else error; no other mount-points supported (alternative to imageOrigPath; if neither specified, auto-determines an original filename under imageServerPath)</description>
        </attribute>
        <attribute name="imageOrigFn" mode="IN" type="String" optional="true">
            <description>Original filename (no directories) of the image - required only if neither imageOrigPath nor imageOrigUrl specified</description>
        </attribute>
        <attribute name="imageOrigFnFmt" mode="IN" type="String" optional="true">
            <description>Image filename format string for original only, relative to imageServerPath/imageUrlPrefix, no extension; only useful if copyOrig==true or if imageOrigPath/imageOrigUrl are omitted (default: same as imageFnFmt)</description>
        </attribute>
        <!-- TODO: support this alternate input
        <attribute name="imageOrigContentId" mode="IN" type="String" optional="true">
            <description>Original image contentId as input (alternative to imageOrigPath)</description>
        </attribute>-->

        <!-- BASE PATHS -->
        <attribute name="imageServerPath" mode="IN" type="String" optional="true">
            <description>Full filesystem path of base server image, parameterized with ${tenantId} (default: uses image.server.path / catalog.properties); also supports component:// and file:// prefixes</description>
        </attribute>
        <attribute name="imageUrlPrefix" mode="IN" type="String" optional="true">
            <description>URL prefix for generated images, parameterized with ${tenantId} (default: uses image.url.prefix / catalog.properties)</description>
        </attribute>

        <!-- GENERATED FILES PARAMETERS -->
        <attribute name="imageFnFmt" mode="IN" type="String" optional="true">
            <description>Image filename format string, relative to imageServerPath/imageUrlPrefix, no extension, parameterized with ${sizetype} (or ${type}) and product fields (default: uses image.filename.format OR image.filename.additionalviewsize.format / catalog.properties)</description>
        </attribute>
        <attribute name="imagePathArgs" mode="IN" type="Map" optional="true">
            <description>Additional args for parameterized paths</description>
        </attribute>
        <attribute name="imagePropXmlPath" mode="IN" type="String" optional="true">
            <description>Path to ImageProperties.xml file containing size types, from ofbiz home root</description>
        </attribute>
        <attribute name="sizeTypeList" mode="IN" type="List" optional="true">
            <description>List of size types to generate and return (default: all types in file)</description>
        </attribute>
        <attribute name="copyOrig" mode="IN" type="Boolean" optional="true">
            <description>If true, also creates copy of the original under the size type "original" (default: false)</description>
        </attribute>
        <attribute name="deleteOld" mode="IN" type="Boolean" optional="true">
            <description>[TODO: NOT IMPLEMENTED] If true, also deletes old files in target directory (default: false)</description>
        </attribute>
        
        <!-- PRODUCT-SPECIFIC -->
        <attribute name="productId" mode="IN" type="String" optional="false">
            <description>productId</description>
        </attribute>
        <attribute name="viewType" mode="IN" type="String" optional="false">
            <description>main|additional</description>
        </attribute>
        <attribute name="viewNumber" mode="IN" type="Integer" optional="true">
            <description>For additional</description>
        </attribute>
        
        <!-- SCALING OPTIONS -->
        <attribute name="scalingOptions" mode="IN" type="Map" optional="true">
            <description>Scaling options, notably the entry: scalerName (algorithm or library name)</description>
        </attribute>
        
        <!-- OUTPUT -->
        <attribute name="imageUrlMap" mode="OUT" type="Map" optional="true">
            <description>Map of size types to URLs (relative to server root, with imageUrlPrefix); if copyOrig==true, also contains "original" (UNLESS found to already exist / same as input)
                NOTE: Unlike stock ofbiz functions, this returns ALL generated. Use productSizeTypeList to iterate the common size types.</description>
        </attribute>
        <attribute name="productSizeTypeList" mode="OUT" type="List" optional="true">
            <description>The list of typical product size types: [small, medium, large, detail]</description>
        </attribute>
        <attribute name="bufferedImage" mode="OUT" type="java.awt.image.BufferedImage" optional="true">
            <description>Original image contents, for reuse</description>
        </attribute>
    </service>
    
    <!-- TODO? Products don't currently support this?
    <service name="productImageDbScaleInAllSize" engine="java"
            location="org.ofbiz.content.image.ContentImageServices" invoke="productImageDbScaleInAllSize" auth="false">
        <description>(TODO) Scales a content/generic database image according to size types in ImageProperties.xml - core implementation (caller specifies all locations/filenames)</description>
        <implements service="contentImageDbScaleInAllSizeCore"/>  
    </service>
    -->
</services>
