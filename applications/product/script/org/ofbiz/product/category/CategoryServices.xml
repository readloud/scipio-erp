<?xml version="1.0" encoding="UTF-8"?>
<!--
This file is subject to the terms and conditions defined in the
files 'LICENSE' and 'NOTICE', which are part of this source
code package.
-->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods-v2.xsd">

    <!-- ================================================================ -->
    <!-- ProductCategory Services -->
    <!-- ================================================================ -->

    <simple-method method-name="createProductCategory" short-description="Create an ProductCategory">
        <check-permission permission="CATALOG" action="_CREATE">
            <alt-permission permission="CATALOG_ROLE" action="_CREATE"/>
            <fail-property resource="ProductUiLabels" property="ProductCatalogCreatePermissionError"/>
        </check-permission>
        <check-errors/>

        <now-timestamp field="nowTimestamp"/>
        <make-value entity-name="ProductCategory" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>

        <if-empty field="parameters.productCategoryId">
            <sequenced-id sequence-name="ProductCategory" field="newEntity.productCategoryId"/>
        <else>
            <set field="newEntity.productCategoryId" from-field="parameters.productCategoryId"/>
            <check-id field="newEntity.productCategoryId"/>
            <check-errors/>
        </else>
        </if-empty>
        <field-to-result field="newEntity.productCategoryId" result-name="productCategoryId"/>

        <create-value value-field="newEntity"/>

        <!-- if setting the primaryParentCategoryId, create a rollup entity too -->
        <!-- NOTE: this is commented out to disable because it is dangerous to add category rollups on a live site without being able to specify a fromDate
        <if-not-empty field="newEntity.primaryParentCategoryId">
            <make-value entity-name="ProductCategoryRollup" value-field="newRollup"/>
            <field-to-field field-name="productCategoryId" map-name="newEntity" to-field-name="productCategoryId" to-map-name="newRollup"/>
            <field-to-field field-name="primaryParentCategoryId" map-name="newEntity" to-field-name="parentProductCategoryId" to-map-name="newRollup"/>
            <env-to-field env-name="nowTimestamp" field-name="fromDate" map-name="newRollup"/>
            <create-value value-field="newRollup"/>
        </if-not-empty>
        -->

        <!-- if the user has the role limited position, add this category to the limit category/ies -->
        <if-has-permission permission="CATALOG_ROLE" action="_CREATE">
            <entity-and entity-name="ProductCategoryRole" list="productCategoryRoles" filter-by-date="true">
                <field-map field-name="partyId" from-field="userLogin.partyId"/>
                <field-map field-name="roleTypeId" value="LTD_ADMIN"/>
            </entity-and>
            <iterate list="productCategoryRoles" entry="productCategoryRole">
                <!-- add this new product to the category -->
                <make-value entity-name="ProductCategoryRollup" value-field="newLimitRollup"/>
                <set field="newLimitRollup.productCategoryId" from-field="newEntity.productCategoryId"/>
                <set field="newLimitRollup.parentProductCategoryId" from-field="productCategoryRole.productCategoryId"/>
                <set field="newLimitRollup.fromDate" from-field="nowTimestamp"/>
                <create-value value-field="newLimitRollup"/>
            </iterate>
        </if-has-permission>
    </simple-method>
    <simple-method method-name="updateProductCategory" short-description="Update an ProductCategory">
        <set field="callingMethodName" value="updateProductCategory"/>
        <set field="checkAction" value="UPDATE"/>
        <call-simple-method method-name="checkCategoryRelatedPermission"/>
        <check-errors/>

        <entity-one entity-name="ProductCategory" value-field="lookedUpValue"/>
        <!-- save this value before overwriting it so we can compare it later -->
        <!-- <field-to-field field-name="primaryParentCategoryId" map-name="lookedUpValue" to-map-name="saveIdMap"/> -->
        <set-nonpk-fields map="parameters" value-field="lookedUpValue"/>
        <store-value value-field="lookedUpValue"/>

        <!-- if setting the primaryParentCategoryId, create a rollup entity too -->
        <!-- NOTE: this is commented out to disable because it is dangerous to add category rollups on a live site without being able to specify a fromDate
        <if-not-empty field="lookedUpValue.primaryParentCategoryId">
            <if-compare-field to-field="saveIdMap.primaryParentCategoryId" field="lookedUpValue.primaryParentCategoryId" operator="not-equals">
                <make-value entity-name="ProductCategoryRollup" value-field="newRollup"/>
                <field-to-field field-name="productCategoryId" map-name="lookedUpValue" to-field-name="productCategoryId" to-map-name="newRollup"/>
                <field-to-field field-name="primaryParentCategoryId" map-name="lookedUpValue" to-field-name="parentProductCategoryId" to-map-name="newRollup"/>
                <now-timestamp field="nowTimestamp"/>
                <env-to-field env-name="nowTimestamp" field-name="fromDate" map-name="newRollup"/>
                <create-value value-field="newRollup"/>
            </if-compare-field>
        </if-not-empty>
        -->
    </simple-method>

    <!-- SCIPIO: new (2017-10-20) -->
    <simple-method method-name="deleteProductCategory" short-description="Delete a ProductCategory (if empty)">
        <set field="callingMethodName" value="deleteProductCategory"/>
        <set field="checkAction" value="DELETE"/>
        <call-simple-method method-name="checkCategoryRelatedPermission"/>
        <check-errors/>

        <entity-one entity-name="ProductCategory" value-field="lookedUpValue"/>
        <remove-value value-field="lookedUpValue"/>
        <check-errors/>
    </simple-method>

    <!-- ================================================================ -->
    <!-- ProductCategoryMember Services -->
    <!-- ================================================================ -->

    <simple-method method-name="addProductToCategory" short-description="Add Product to Category">
        <!-- note that the security semantics require the user to have the general admin permission,
            or the role limited permission and association with the category, not the product -->
            <!--
        <set value="addProductToCategory" field="callingMethodName"/>
        <set value="CREATE" field="checkAction"/>
        <call-simple-method method-name="checkCategoryRelatedPermission"/>
        <check-errors/>
        -->
        <make-value entity-name="ProductCategoryMember" value-field="newEntity"/>
        <set-pk-fields map="parameters" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>

        <if-empty field="newEntity.fromDate">
            <now-timestamp field="newEntity.fromDate"/>
        </if-empty>

        <create-value value-field="newEntity"/>

        <!-- SCIPIO: 2017-10-25: now output the full PK including fromDate so caller can get exact value-->
        <field-to-result field="newEntity.productId" result-name="productId"/>
        <field-to-result field="newEntity.productCategoryId" result-name="productCategoryId"/>
        <field-to-result field="newEntity.fromDate" result-name="fromDate"/>
    </simple-method>

    <simple-method method-name="addProductToCategories" short-description="Add Product to Multiple Categories">
        <!-- SCIPIO: 2017-10-25: all assoc will now get the same fromDate so the caller get the full PK reliably -->
        <if-empty field="parameters.fromDate">
            <now-timestamp field="parameters.fromDate"/>
        </if-empty>

        <if-instance-of field="parameters.categories" class="java.util.List">
            <iterate list="parameters.categories" entry="category">
                <!-- note that the security semantics require the user to have the general admin permission,
                    or the role limited permission and association with the category, not the product -->
                <!--
                <set field="productCategoryIdToCheck" from-field="category"/>
                <set field="callingMethodName" value="addProductToCategories"/>
                <set field="checkAction" value="CREATE"/>
                <call-simple-method method-name="checkCategoryRelatedPermission"/>
                <check-errors/>
                 -->

                <make-value entity-name="ProductCategoryMember" value-field="newEntity"/>
                <set field="newEntity.productCategoryId" from-field="category"/>
                <set-pk-fields map="parameters" value-field="newEntity"/>
                <set-nonpk-fields map="parameters" value-field="newEntity"/>

                <!-- SCIPIO: now set in parameters above
                <if-empty field="newEntity.fromDate">
                    <now-timestamp field="newEntity.fromDate"/>
                </if-empty>-->

                <create-value value-field="newEntity"/>
            </iterate>
            <else>
                <!-- note that the security semantics require the user to have the general admin permission,
                    or the role limited permission and association with the category, not the product -->
                <set from-field="parameters.categories" field="productCategoryIdToCheck"/>
                <set field="callingMethodName" value="addProductToCategories"/>
                <set field="checkAction" value="CREATE"/>
                <call-simple-method method-name="checkCategoryRelatedPermission"/>
                <check-errors/>

                <make-value entity-name="ProductCategoryMember" value-field="newEntity"/>
                <set field="newEntity.productCategoryId" from-field="parameters.categories"/>
                <set-pk-fields map="parameters" value-field="newEntity"/>
                <set-nonpk-fields map="parameters" value-field="newEntity"/>

                <!-- SCIPIO: now set in parameters above
                <if-empty field="newEntity.fromDate">
                    <now-timestamp field="newEntity.fromDate"/>
                </if-empty>-->

                <create-value value-field="newEntity"/>
            </else>
        </if-instance-of>

        <!-- SCIPIO: 2017-10-25: output fromDate as it may have been empty and caller can't get exact PK otherwise -->
        <field-to-result field="parameters.fromDate" result-name="fromDate"/>
    </simple-method>

    <simple-method method-name="updateProductToCategory" short-description="Update Product to Category Application">
        <!-- note that the security semantics require the user to have the general admin permission,
            or the role limited permission and association with the category, not the product -->
        <!--
        <set value="updateProductToCategory" field="callingMethodName"/>
        <set value="UPDATE" field="checkAction"/>
        <call-simple-method method-name="checkCategoryRelatedPermission"/>
        <check-errors/>
         -->

        <make-value entity-name="ProductCategoryMember" value-field="lookupPKMap"/>
        <set-pk-fields map="parameters" value-field="lookupPKMap"/>
        <find-by-primary-key entity-name="ProductCategoryMember" map="lookupPKMap" value-field="lookedUpValue"/>
        <set-nonpk-fields map="parameters" value-field="lookedUpValue"/>
        <store-value value-field="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="removeProductFromCategory" short-description="Remove Product From Category">
        <!-- note that the security semantics require the user to have the general admin permission,
            or the role limited permission and association with the category, not the product -->
        <!--
        <set value="removeProductFromCategory" field="callingMethodName"/>
        <set value="DELETE" field="checkAction"/>
        <call-simple-method method-name="checkCategoryRelatedPermission"/>
        <check-errors/>
         -->

        <!-- If the associated category was the primary category for the product, clear that field -->
        <entity-one entity-name="Product" value-field="product" auto-field-map="true"/>
        <if-compare-field field="product.primaryProductCategoryId" to-field="parameters.productCategoryId" operator="equals">
            <clear-field field="product.primaryProductCategoryId"/>
            <store-value value-field="product"/>
        </if-compare-field>

        <make-value entity-name="ProductCategoryMember" value-field="lookupPKMap"/>
        <set-pk-fields map="parameters" value-field="lookupPKMap"/>
        <find-by-primary-key entity-name="ProductCategoryMember" map="lookupPKMap" value-field="lookedUpValue"/>
        <remove-value value-field="lookedUpValue"/>
    </simple-method>

    <!-- ================================================================ -->
    <!-- ProductCategoryRole Services -->
    <!-- ================================================================ -->

    <simple-method method-name="addPartyToCategory" short-description="Add Party to Category">
        <set value="addPartyToCategory" field="callingMethodName"/>
        <set value="CREATE" field="checkAction"/>
        <call-simple-method method-name="checkCategoryRelatedPermission"/>
        <check-errors/>

        <make-value entity-name="ProductCategoryRole" value-field="newEntity"/>
        <set-pk-fields map="parameters" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>

        <if-empty field="newEntity.fromDate">
            <now-timestamp field="newEntity.fromDate"/>
        </if-empty>

        <create-value value-field="newEntity"/>
    </simple-method>
    <simple-method method-name="updatePartyToCategory" short-description="Update Party to Category Application">
        <set value="updatePartyToCategory" field="callingMethodName"/>
        <set value="UPDATE" field="checkAction"/>
        <call-simple-method method-name="checkCategoryRelatedPermission"/>
        <check-errors/>

        <make-value entity-name="ProductCategoryRole" value-field="lookupPKMap"/>
        <set-pk-fields map="parameters" value-field="lookupPKMap"/>
        <find-by-primary-key entity-name="ProductCategoryRole" map="lookupPKMap" value-field="lookedUpValue"/>
        <set-nonpk-fields map="parameters" value-field="lookedUpValue"/>
        <store-value value-field="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="removePartyFromCategory" short-description="Remove Party From Category">
        <set value="removePartyFromCategory" field="callingMethodName"/>
        <set value="DELETE" field="checkAction"/>
        <call-simple-method method-name="checkCategoryRelatedPermission"/>
        <check-errors/>

        <make-value entity-name="ProductCategoryRole" value-field="lookupPKMap"/>
        <set-pk-fields map="parameters" value-field="lookupPKMap"/>
        <find-by-primary-key entity-name="ProductCategoryRole" map="lookupPKMap" value-field="lookedUpValue"/>
        <remove-value value-field="lookedUpValue"/>
    </simple-method>

    <!-- ================================================================ -->
    <!-- ProductCategoryRollup Services -->
    <!-- ================================================================ -->

    <simple-method method-name="addProductCategoryToCategory" short-description="Add ProductCategory to Category">
        <set value="addProductCategoryToCategory" field="callingMethodName"/>
        <set value="CREATE" field="checkAction"/>
        <!-- note the the user must be associated with the parent category with the role limited permission -->
        <set value="parentProductCategoryId" field="productCategoryIdName"/>
        <call-simple-method method-name="checkCategoryRelatedPermission"/>
        <check-errors/>

        <make-value entity-name="ProductCategoryRollup" value-field="newEntity"/>
        <set-pk-fields map="parameters" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>

        <if-empty field="newEntity.fromDate">
            <now-timestamp field="newEntity.fromDate"/>
        </if-empty>

        <create-value value-field="newEntity"/>

        <!-- SCIPIO: 2017-10-18: output PK fields so caller can get PK when fromDate was null -->
        <field-to-result field="newEntity.productCategoryId" result-name="productCategoryId"/>
        <field-to-result field="newEntity.parentProductCategoryId" result-name="parentProductCategoryId"/>
        <field-to-result field="newEntity.fromDate" result-name="fromDate"/>
    </simple-method>
    <simple-method method-name="addProductCategoryToCategories" short-description="Add ProductCategory to Categories">
        <!-- SCIPIO: 2017-10-18: use the same now-timestamp for all the categories -->
        <if-empty field="parameters.fromDate">
            <now-timestamp field="parameters.fromDate"/>
        </if-empty>
        <if-instance-of field="parameters.categories" class="java.util.List">
            <iterate list="parameters.categories" entry="category">
                <set field="callingMethodName" value="addProductCategoryToCategories"/>
                <set field="checkAction" value="CREATE"/>
                <!-- note the the user must be associated with the parent category with the role limited permission -->
                <set field="productCategoryIdToCheck" from-field="category"/>
                <call-simple-method method-name="checkCategoryRelatedPermission"/>
                <check-errors/>

                <make-value entity-name="ProductCategoryRollup" value-field="newEntity"/>
                <set field="newEntity.parentProductCategoryId" from-field="category"/>
                <set-pk-fields map="parameters" value-field="newEntity"/>
                <set-nonpk-fields map="parameters" value-field="newEntity"/>

                <!-- SCIPIO: 2017-10-18: now set through parameters.fromDate (above)
                <if-empty field="newEntity.fromDate">
                    <now-timestamp field="newEntity.fromDate"/>
                    <set field="newEntity.fromDate" from-field="nowTs"/>
                </if-empty>
                -->

                <create-value value-field="newEntity"/>
            </iterate>
            <else>
                <set value="addProductCategoryToCategories" field="callingMethodName"/>
                <set value="CREATE" field="checkAction"/>
                <!-- note the the user must be associated with the parent category with the role limited permission -->
                <set field="productCategoryIdToCheck" from-field="parameters.categories"/>
                <call-simple-method method-name="checkCategoryRelatedPermission"/>
                <check-errors/>

                <make-value entity-name="ProductCategoryRollup" value-field="newEntity"/>
                <set field="newEntity.parentProductCategoryId" from-field="parameters.categories"/>
                <set-pk-fields map="parameters" value-field="newEntity"/>
                <set-nonpk-fields map="parameters" value-field="newEntity"/>

                <!-- SCIPIO: 2017-10-18: now set through parameters.fromDate (above)
                <if-empty field="newEntity.fromDate">
                    <now-timestamp field="newEntity.fromDate"/>
                </if-empty>
                -->

                <create-value value-field="newEntity"/>
            </else>
        </if-instance-of>
        <!-- SCIPIO: 2017-10-18: output fromDate so caller can get PK when fromDate was null -->
        <field-to-result field="parameters.fromDate" result-name="fromDate"/>
    </simple-method>
    <simple-method method-name="updateProductCategoryToCategory" short-description="Update ProductCategory to Category Application">
        <set value="updateProductCategoryToCategory" field="callingMethodName"/>
        <set value="UPDATE" field="checkAction"/>
        <!-- note the the user must be associated with the parent category with the role limited permission -->
        <set value="parentProductCategoryId" field="productCategoryIdName"/>
        <call-simple-method method-name="checkCategoryRelatedPermission"/>
        <check-errors/>

        <make-value entity-name="ProductCategoryRollup" value-field="lookupPKMap"/>
        <set-pk-fields map="parameters" value-field="lookupPKMap"/>
        <find-by-primary-key entity-name="ProductCategoryRollup" map="lookupPKMap" value-field="lookedUpValue"/>
        <set-nonpk-fields map="parameters" value-field="lookedUpValue"/>
        <store-value value-field="lookedUpValue"/>
        <if-not-empty field="parameters.originalProductCategoryId">
            <field-to-result field="parameters.originalProductCategoryId" result-name="productCategoryId"/>
        <else>
            <field-to-result field="parameters.productCategoryId" result-name="productCategoryId"/>
        </else>
        </if-not-empty>
    </simple-method>
    <simple-method method-name="removeProductCategoryFromCategory" short-description="Remove ProductCategory From Category">
        <set value="removeProductCategoryFromCategory" field="callingMethodName"/>
        <set value="DELETE" field="checkAction"/>
        <!-- note the the user must be associated with the parent category with the role limited permission -->
        <set value="parentProductCategoryId" field="productCategoryIdName"/>
        <call-simple-method method-name="checkCategoryRelatedPermission"/>
        <check-errors/>

        <make-value entity-name="ProductCategoryRollup" value-field="lookupPKMap"/>
        <set-pk-fields map="parameters" value-field="lookupPKMap"/>
        <find-by-primary-key entity-name="ProductCategoryRollup" map="lookupPKMap" value-field="lookedUpValue"/>
        <remove-value value-field="lookedUpValue"/>
        <if-not-empty field="parameters.originalProductCategoryId">
            <field-to-result field="parameters.originalProductCategoryId" result-name="productCategoryId"/>
        <else>
            <field-to-result field="parameters.productCategoryId" result-name="productCategoryId"/>
        </else>
        </if-not-empty>
    </simple-method>

    <!-- ================================================================ -->
    <!-- Special Category Function Services -->
    <!-- ================================================================ -->

    <simple-method method-name="copyCategoryProductMembers" short-description="copy CategoryProduct Members to a CategoryProductTo">
        <set value="copyCategoryProductMembers" field="callingMethodName"/>
        <set value="CREATE" field="checkAction"/>
        <!-- note the the user must be associated with the target category with the role limited permission -->
        <set value="productCategoryIdTo" field="productCategoryIdName"/>
        <call-simple-method method-name="checkCategoryRelatedPermission"/>
        <check-errors/>

        <entity-and entity-name="ProductCategoryMember" list="productCategoryMembers">
            <field-map field-name="productCategoryId" from-field="parameters.productCategoryId"/>
        </entity-and>

        <set field="validDate" from-field="parameters.validDate"/>
        <if-not-empty field="validDate">
            <filter-list-by-date list="productCategoryMembers" valid-date="validDate"/>
        </if-not-empty>

        <!-- add each to a list to store and then store all and let the entity engine do inserts or updates as needed; much more reliable/useful -->
        <iterate list="productCategoryMembers" entry="productCategoryMember">
            <clone-value value-field="productCategoryMember" new-value-field="newProductCategoryMember"/>
            <set field="newProductCategoryMember.productCategoryId" from-field="parameters.productCategoryIdTo"/>
            <field-to-list field="newProductCategoryMember" list="pcmsToStore"/>
        </iterate>
        <store-list list="pcmsToStore"/>

        <if-compare field="parameters.recurse" operator="equals" value="Y">
            <!-- call this service for each sub-category in the rollup with the same productCategoryIdTo -->
            <set field="lookupChildrenMap.parentProductCategoryId" from-field="parameters.productCategoryId"/>
            <find-by-and entity-name="ProductCategoryRollup" map="lookupChildrenMap" list="productCategoryRollups"/>

            <if-not-empty field="validDate">
                <filter-list-by-date list="productCategoryRollups" valid-date="validDate"/>
            </if-not-empty>

            <iterate list="productCategoryRollups" entry="productCategoryRollup">
                <set field="callServiceMap.productCategoryId" from-field="productCategoryRollup.productCategoryId"/>
                <set field="callServiceMap.productCategoryIdTo" from-field="parameters.productCategoryIdTo"/>
                <set field="callServiceMap.validDate" from-field="parameters.validDate"/>
                <set field="callServiceMap.recurse" from-field="parameters.recurse"/>
                <call-service service-name="copyCategoryProductMembers" in-map-name="callServiceMap"/>
            </iterate>
        </if-compare>
    </simple-method>

    <simple-method method-name="duplicateCategoryEntities" short-description="a service wrapper for copyCategoryEntities">
        <set value="duplicateCategoryEntities" field="callingMethodName"/>
        <check-permission permission="CATALOG" action="_CREATE">
            <alt-permission permission="CATALOG_ROLE" action="_CREATE"/>
            <fail-property resource="ProductUiLabels" property="ProductCatalogCreatePermissionError"/>
        </check-permission>
        <check-errors/>

        <set field="entityName" from-field="parameters.entityName"/>
        <set field="productCategoryId" from-field="parameters.productCategoryId"/>
        <set field="productCategoryIdTo" from-field="parameters.productCategoryIdTo"/>
        <set field="validDate" from-field="parameters.validDate"/>
        <call-simple-method method-name="copyCategoryEntities"/>
    </simple-method>

    <simple-method method-name="copyCategoryEntities" short-description="copies all entities of entityName with a productCategoryId to a new entity with a productCategoryIdTo,
            filtering them by a timestamp passed in to validDate if necessary">
        <entity-and entity-name="${entityName}" list="categoryEntities">
            <field-map field-name="productCategoryId" from-field="productCategoryId"/>
        </entity-and>

        <if-not-empty field="validDate">
            <filter-list-by-date list="categoryEntities" valid-date="validDate"/>
        </if-not-empty>

        <!-- add each to a list to store and then store all and let the entity engine do inserts or updates as needed; much more reliable/useful -->
        <iterate list="categoryEntities" entry="categoryEntity">
            <clone-value value-field="categoryEntity" new-value-field="newCategoryEntity"/>
            <set field="newCategoryEntity.productCategoryId" from-field="productCategoryIdTo"/>
            <field-to-list field="newCategoryEntity" list="entitiesToStore"/>
        </iterate>
        <store-list list="entitiesToStore"/>
      </simple-method>

    <simple-method method-name="expireAllCategoryProductMembers" short-description="Remove ProductCategory From Category">
        <set value="expireAllCategoryProductMembers" field="callingMethodName"/>
        <set value="UPDATE" field="checkAction"/>
        <call-simple-method method-name="checkCategoryRelatedPermission"/>
        <check-errors/>

        <if-not-empty field="parameters.thruDate">
            <set field="expireTimestamp" from-field="parameters.thruDate"/>
            <else>
                <now-timestamp field="expireTimestamp"/>
            </else>
        </if-not-empty>

        <entity-and entity-name="ProductCategoryMember" list="productCategoryMembers">
            <field-map field-name="productCategoryId" from-field="parameters.productCategoryId"/>
        </entity-and>

        <iterate list="productCategoryMembers" entry="productCategoryMember">
            <set field="productCategoryMember.thruDate" from-field="expireTimestamp"/>
            <store-value value-field="productCategoryMember"/>
        </iterate>
    </simple-method>
    <simple-method method-name="removeExpiredCategoryProductMembers" short-description="Remove ProductCategory From Category">
        <set value="removeExpiredCategoryProductMembers" field="callingMethodName"/>
        <set value="DELETE" field="checkAction"/>
        <call-simple-method method-name="checkCategoryRelatedPermission"/>
        <check-errors/>

        <if-not-empty field="parameters.validDate">
            <set field="expireTimestamp" from-field="parameters.validDate"/>
            <else>
                <now-timestamp field="expireTimestamp"/>
            </else>
        </if-not-empty>

        <entity-and entity-name="ProductCategoryMember" list="productCategoryMembers">
            <field-map field-name="productCategoryId" from-field="parameters.productCategoryId"/>
        </entity-and>

        <iterate list="productCategoryMembers" entry="productCategoryMember">
            <if-compare-field field="productCategoryMember.thruDate" to-field="expireTimestamp" operator="less" type="Timestamp">
                <remove-value value-field="productCategoryMember"/>
            </if-compare-field>
        </iterate>
    </simple-method>

    <!-- ================================================================ -->
    <!-- Special Category Related Create Services -->
    <!-- ================================================================ -->
    <simple-method method-name="createProductInCategory" short-description="Create a Product in a Category along with special information such as features">
        <set value="createProductInCategory" field="callingMethodName"/>
        <set value="CREATE" field="checkAction"/>
        <call-simple-method method-name="checkCategoryRelatedPermission"/>
        <check-errors/>

        <if-empty field="parameters.currencyUomId">
            <!-- default to USD for lack of a better alternative, for now anyway... -->
            <set field="parameters.currencyUomId" value="USD"/>
        </if-empty>

        <!-- create Product -->
        <set-service-fields service-name="createProduct" map="parameters" to-map="callCreateProductMap"/>
        <if-empty field="callCreateProductMap.productTypeId">
            <set field="callCreateProductMap.productTypeId" value="FINISHED_GOOD"/>
        </if-empty>
        <call-service service-name="createProduct" in-map-name="callCreateProductMap">
            <result-to-field result-name="productId"/>
        </call-service>
        <field-to-result field="productId"/>

        <!-- create ProductCategoryMember -->
        <set field="callCreateProductCategoryMemberMap.productId" from-field="productId"/>
        <set field="callCreateProductCategoryMemberMap.productCategoryId" from-field="parameters.productCategoryId"/>
        <call-service service-name="addProductToCategory" in-map-name="callCreateProductCategoryMemberMap"/>

        <!-- create defaultPrice and averageCost ProductPrice -->
        <if-not-empty field="parameters.defaultPrice">
            <set field="createDefaultPriceMap.productId" from-field="productId"/>
            <set field="createDefaultPriceMap.currencyUomId" from-field="parameters.currencyUomId"/>
            <set field="createDefaultPriceMap.price" from-field="parameters.defaultPrice"/>
            <set field="createDefaultPriceMap.productStoreGroupId" value="_NA_"/>
            <set field="createDefaultPriceMap.productPriceTypeId" value="DEFAULT_PRICE"/>
            <set field="createDefaultPriceMap.productPricePurposeId" value="PURCHASE"/>
            <call-service service-name="createProductPrice" in-map-name="createDefaultPriceMap"/>
        </if-not-empty>

        <if-not-empty field="parameters.averageCost">
            <set field="createAverageCostMap.productId" from-field="productId"/>
            <set field="createAverageCostMap.currencyUomId" from-field="parameters.currencyUomId"/>
            <set field="createAverageCostMap.price" from-field="parameters.averageCost"/>
            <set field="createAverageCostMap.productStoreGroupId" value="_NA_"/>
            <set field="createAverageCostMap.productPriceTypeId" value="AVERAGE_COST"/>
            <set field="createAverageCostMap.productPricePurposeId" value="PURCHASE"/>
            <call-service service-name="createProductPrice" in-map-name="createAverageCostMap"/>
        </if-not-empty>

        <!-- create ProductFeatureAppl(s) -->
        <set field="hasSelectableFeatures" value="N"/>
        <iterate-map map="parameters.productFeatureIdByType" key="productFeatureTypeId" value="productFeatureId">
            <log level="info" message="Applying feature [${productFeatureId}] of type [${productFeatureTypeId}] to product [${productId}]"/>
            <set field="createPfaMap.productId" from-field="productId"/>
            <set field="createPfaMap.productFeatureId" from-field="productFeatureId"/>
            <if-compare field="parameters.productFeatureSelectableByType[productFeatureTypeId]" operator="equals" value="Y">
                <set field="createPfaMap.productFeatureApplTypeId" value="SELECTABLE_FEATURE"/>
                <set field="hasSelectableFeatures" value="Y"/>
            <else>
                <set field="createPfaMap.productFeatureApplTypeId" value="STANDARD_FEATURE"/>
            </else>
            </if-compare>
            <call-service service-name="applyFeatureToProduct" in-map-name="createPfaMap"/>
            <clear-field field="createPfaMap"/>
        </iterate-map>

        <!-- set isVirtual based on hasSelectableFeatures -->
        <if-compare field="hasSelectableFeatures" operator="equals" value="Y">
            <entity-one entity-name="Product" value-field="newProduct"/>
            <set field="newProduct.isVirtual" value="Y"/>
            <store-value value-field="newProduct"/>
        </if-compare>
    </simple-method>

    <simple-method method-name="duplicateProductCategory" short-description="Duplicate a ProductCategory">
        <set value="duplicateProductCategory" field="callingMethodName"/>
        <check-permission permission="CATALOG" action="_CREATE">
            <alt-permission permission="CATALOG_ROLE" action="_CREATE"/>
            <fail-property resource="ProductUiLabels" property="ProductCatalogCreatePermissionError"/>
        </check-permission>
        <check-errors/>

        <!-- look up the old product category and clone it -->
        <entity-one entity-name="ProductCategory" value-field="oldCategory">
            <field-map field-name="productCategoryId" from-field="parameters.oldProductCategoryId"/>
        </entity-one>
        <clone-value value-field="oldCategory" new-value-field="newCategory"/>

        <!-- set the new product category id, and write it to the datasource -->
        <set field="newCategory.productCategoryId" from-field="parameters.productCategoryId"/>
        <create-value value-field="newCategory"/>
        <set field="productCategoryId" from-field="parameters.oldProductCategoryId"/>
        <set field="productCategoryIdTo" from-field="parameters.productCategoryId"/>

        <!-- if requested, duplicate related data as well -->
        <if-not-empty field="parameters.duplicateMembers">
            <set field="entityName" value="ProductCategoryMember"/>
            <call-simple-method method-name="copyCategoryEntities"/>
        </if-not-empty>
        <if-not-empty field="parameters.duplicateContent">
            <set field="entityName" value="ProductCategoryContent"/>
            <call-simple-method method-name="copyCategoryEntities"/>
        </if-not-empty>
        <if-not-empty field="parameters.duplicateRoles">
            <set field="entityName" value="ProductCategoryRole"/>
            <call-simple-method method-name="copyCategoryEntities"/>
        </if-not-empty>
        <if-not-empty field="parameters.duplicateAttributes">
            <set field="entityName" value="ProductCategoryAttribute"/>
            <call-simple-method method-name="copyCategoryEntities"/>
        </if-not-empty>
        <if-not-empty field="parameters.duplicateFeatures">
            <set field="entityName" value="ProductFeatureCategoryAppl"/>
            <call-simple-method method-name="copyCategoryEntities"/>
        </if-not-empty>
        <if-not-empty field="parameters.duplicateCatalogs">
            <set field="entityName" value="ProdCatalogCategory"/>
            <call-simple-method method-name="copyCategoryEntities"/>
        </if-not-empty>

          <!-- parent rollups are where oldProductCategoryId = ProductCategoryRollup.productCategoryId, but the
            child roll up is where oldProductCategoryId = ProductCategoryRollup.parentProductCategoryId and hence
            requires a new find-by map -->
        <if-not-empty field="parameters.duplicateParentRollup">
            <entity-and entity-name="ProductCategoryRollup" list="foundValues">
                <field-map field-name="productCategoryId" from-field="parameters.oldProductCategoryId"/>
            </entity-and>
            <iterate list="foundValues" entry="foundValue">
                <clone-value value-field="foundValue" new-value-field="newTempValue"/>
                <set field="newTempValue.productCategoryId" from-field="parameters.productCategoryId"/>
                <create-value value-field="newTempValue"/>
            </iterate>
        </if-not-empty>
        <if-not-empty field="parameters.duplicateChildRollup">
            <entity-and entity-name="ProductCategoryRollup" list="foundValues">
                <field-map field-name="parentProductCategoryId" from-field="parameters.oldProductCategoryId"/>
            </entity-and>
            <iterate list="foundValues" entry="foundValue">
                <clone-value value-field="foundValue" new-value-field="newTempValue"/>
                <set field="newTempValue.parentProductCategoryId" from-field="parameters.productCategoryId"/>
                <create-value value-field="newTempValue"/>
            </iterate>
        </if-not-empty>
    </simple-method>

    <!-- ================================================================ -->
    <!-- Product Category Attribute Services -->
    <!-- ================================================================ -->

    <simple-method method-name="createProductCategoryAttribute"
        short-description="Create an attribute for a product category">
        <check-permission permission="CATALOG" action="_CREATE">
            <fail-property resource="ProductUiLabels" property="ProductCatalogCreatePermissionError"/>
        </check-permission>
        <check-errors/>

        <make-value entity-name="ProductCategoryAttribute" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>
        <set-pk-fields map="parameters" value-field="newEntity"/>

        <create-value value-field="newEntity"/>
    </simple-method>
    <simple-method method-name="updateProductCategoryAttribute"
        short-description="Update an association between two product categories">
        <check-permission permission="CATALOG" action="_UPDATE">
            <fail-property resource="ProductUiLabels" property="ProductCatalogUpdatePermissionError"/>
        </check-permission>
        <check-errors/>

        <make-value entity-name="ProductCategoryAttribute" value-field="lookupPKMap"/>
        <set-pk-fields map="parameters" value-field="lookupPKMap"/>
        <find-by-primary-key entity-name="ProductCategoryAttribute" map="lookupPKMap" value-field="ProductCategoryAttributeInstance"/>
        <set-nonpk-fields map="parameters" value-field="ProductCategoryAttributeInstance"/>
        <store-value value-field="ProductCategoryAttributeInstance"/>
    </simple-method>
    <simple-method method-name="deleteProductCategoryAttribute"
        short-description="Delete an association between two product categories">
        <check-permission permission="CATALOG" action="_DELETE">
            <fail-property resource="ProductUiLabels" property="ProductCatalogDeletePermissionError"/>
        </check-permission>
        <check-errors/>

        <make-value entity-name="ProductCategoryAttribute" value-field="lookupPKMap"/>
        <set-pk-fields map="parameters" value-field="lookupPKMap"/>
        <find-by-primary-key entity-name="ProductCategoryAttribute" map="lookupPKMap" value-field="ProductCategoryAttributeInstance"/>
        <remove-value value-field="ProductCategoryAttributeInstance"/>
    </simple-method>


    <!-- ProductCategoryLink Create/Update/Delete"-->
    <simple-method method-name="createProductCategoryLink" short-description="create a ProductCategoryLink">
        <make-value entity-name="ProductCategoryLink" value-field="newEntity"/>
        <set field="newEntity.productCategoryId" from-field="parameters.productCategoryId"/>

        <!-- don't set the fromDate yet; let's get the seq ID first -->
        <if-empty field="parameters.linkSeqId">
            <make-next-seq-id value-field="newEntity" seq-field-name="linkSeqId"/> <!-- this finds the next sub-sequence ID -->
            <set from-field="linkSeqId" field="newEntity.linkSeqId"/>
        </if-empty>

        <!-- now set the rest of the PK fields (should just be fromDate now; unless linkSeqId is not empty -->
        <set-pk-fields map="parameters" value-field="newEntity"/>
        <if-empty field="newEntity.fromDate">
            <now-timestamp field="newEntity.fromDate"/>
        </if-empty>

        <set-nonpk-fields map="parameters" value-field="newEntity"/>
        <create-value value-field="newEntity"/>
    </simple-method>

    <simple-method method-name="updateProductCategoryLink" short-description="update a ProductCategoryLink">
        <entity-one entity-name="ProductCategoryLink" value-field="lookedUpValue"/>
        <set-nonpk-fields map="parameters" value-field="lookedUpValue"/>
        <store-value value-field="lookedUpValue"/>
    </simple-method>

    <simple-method method-name="deleteProductCategoryLink" short-description="delete a ProductCategoryLink">
        <entity-one entity-name="ProductCategoryLink" value-field="lookedUpValue"/>
        <remove-value value-field="lookedUpValue"/>
    </simple-method>

    <!-- ============================= -->
    <!-- Permission Methods -->
    <!-- ============================= -->

    <!-- a methods to centralize product security code, meant to be called in-line with
        call-simple-method, and the checkAction and callingMethodName attributes should be in the method context -->
    <simple-method method-name="checkCategoryRelatedPermission" short-description="Check Product Category Related Permission">
        <if-empty field="callingMethodName">
            <property-to-field resource="CommonUiLabels" property="CommonPermissionThisOperation" field="callingMethodName"/>
        </if-empty>
        <if-empty field="checkAction">
            <set field="checkAction" value="UPDATE"/>
        </if-empty>
        <if-empty field="productCategoryIdName">
            <set field="productCategoryIdName" value="productCategoryId"/>
        </if-empty>
        <if-empty field="productCategoryIdToCheck">
            <set field="productCategoryIdToCheck" from-field="parameters.${productCategoryIdName}"/>
        </if-empty>

        <!-- find all role-categories that this category is a member of -->
        <if>
            <condition>
                <not><if-has-permission permission="CATALOG" action="_${checkAction}"/></not>
            </condition>
            <then>
                <entity-and entity-name="ProductCategoryRollupAndRole" list="roleCategories" filter-by-date="true">
                    <field-map field-name="productCategoryId" from-field="productCategoryIdToCheck"/>
                    <field-map field-name="partyId" from-field="userLogin.partyId"/>
                    <field-map field-name="roleTypeId" value="LTD_ADMIN"/>
                </entity-and>
                <filter-list-by-date list="roleCategories" from-field-name="roleFromDate" thru-field-name="roleThruDate"/>
            </then>
        </if>
        <log level="info" message="Checking category permission, roleCategories=${roleCategories}"/>
        <if>
            <condition>
                <not>
                    <or>
                        <if-has-permission permission="CATALOG" action="_${checkAction}"/>
                        <and>
                            <if-has-permission permission="CATALOG_ROLE" action="_${checkAction}"/>
                            <not><if-empty field="roleCategories"/></not>
                        </and>
                    </or>
                </not>
            </condition>
            <then>
                <log level="verbose" message="Permission check failed, user does not have permission"/>
                <add-error>
                    <fail-property resource="ProductUiLabels" property="ProductCatalogCreatePermissionError"/>
                </add-error>
                <set field="hasPermission" type="Boolean" value="false"/>
            </then>
        </if>
    </simple-method>
    <simple-method method-name="productCategoryGenericPermission" short-description="Main permission logic">
        <set field="mainAction" from-field="parameters.mainAction"/>
        <if-empty field="mainAction">
            <add-error>
                <fail-property resource="ProductUiLabels" property="ProductMissingMainActionInPermissionService"/>
            </add-error>
            <check-errors/>
        </if-empty>

        <set field="callingMethodName" from-field="parameters.resourceDescription"/>
        <set field="checkAction" from-field="parameters.mainAction"/>
        <call-simple-method method-name="checkCategoryRelatedPermission"/>

        <if-empty field="error_list">
            <set field="hasPermission" type="Boolean" value="true"/>
            <field-to-result field="hasPermission"/>

            <else>
                <property-to-field resource="ProductUiLabels" property="ProductPermissionError" field="failMessage"/>
                <set field="hasPermission" type="Boolean" value="false"/>
                <field-to-result field="hasPermission"/>
                <field-to-result field="failMessage"/>
            </else>
        </if-empty>
    </simple-method>

    <!-- a service verion of checkCategoryRelatedPermission, only with purchase/viewAllowPermReqd taken into account -->
    <simple-method method-name="checkCategoryPermissionWithViewPurchaseAllow" short-description="Check Product Category Permission With View and Purchase Allow">
        <set-service-fields service-name="productCategoryGenericPermission" map="parameters" to-map="productCategoryGenericPermissionMap"/>
        <call-service service-name="productCategoryGenericPermission" in-map-name="productCategoryGenericPermissionMap">
            <results-to-map map-name="genericResult"/>
        </call-service>
        <if-compare field="genericResult.hasPermission" operator="equals" value="false" type="Boolean">
            <field-to-result field="genericResult.hasPermission" result-name="hasPermission"/>
            <field-to-result field="failMessage.genericResult.failMessage" result-name="genericResult.failMessage"/>
            <return/>
        </if-compare>

        <!-- if the generic permission test passed, carry on -->
        <set field="hasPermission" type="Boolean" value="true"/>

        <!--  Set up for a call to checkCategoryRelatedPermission below, but callingMethodName is needed sooner -->
        <set field="resourceDescription" from-field="parameters.resourceDescription"/>
        <if-empty field="resourceDescription">
            <property-to-field resource="CommonUiLabels" property="CommonPermissionThisOperation" field="resourceDescription"/>
        </if-empty>
        <set field="callingMethodName" from-field="resourceDescription"/>
        <set field="checkAction" from-field="parameters.mainAction" default-value="UPDATE"/>

        <entity-condition entity-name="ProdCatalogCategory" list="prodCatalogCategoryList" filter-by-date="true">
            <condition-list combine="and">
                <condition-expr field-name="productCategoryId" from-field="parameters.productCategoryId"/>
                <condition-list combine="or">
                    <condition-expr field-name="prodCatalogCategoryTypeId" value="PCCT_VIEW_ALLW"/>
                    <condition-expr field-name="prodCatalogCategoryTypeId" value="PCCT_PURCH_ALLW"/>
                </condition-list>
            </condition-list>
        </entity-condition>
        <iterate list="prodCatalogCategoryList" entry="prodCatalogCategory">
            <!-- Do not do a permission check unless the ProdCatalog requires it -->
            <entity-one entity-name="ProdCatalog" value-field="prodCatalog" auto-field-map="false">
                <field-map field-name="prodCatalogId" from-field="prodCatalogCategory.prodCatalogId"/>
            </entity-one>
            <if>
                <condition>
                    <and>
                        <if-compare field="prodCatalog.viewAllowPermReqd" operator="equals" value="Y"/>
                        <not><if-has-permission permission="CATALOG_VIEW_ALLOW"/></not>
                    </and>
                </condition>
                <then>
                    <log level="verbose" message="Permission check failed, user does not have permission"/>
                    <set field="failMessage" value="Security Error: to run ${callingMethodName} you must have the CATALOG_VIEW_ALLOW permission."/>
                    <set field="hasPermission" type="Boolean" value="false"/>
                </then>
            </if>
            <if>
                <condition>
                    <and>
                        <if-compare field="prodCatalog.purchaseAllowPermReqd" operator="equals" value="Y"/>
                        <not><if-has-permission permission="CATALOG_PURCHASE_ALLOW"/></not>
                    </and>
                </condition>
                <then>
                    <log level="verbose" message="Permission check failed, user does not have permission"/>
                    <set field="failMessage" value="Security Error: to run ${callingMethodName} you must have the CATALOG_PURCHASE_ALLOW permission."/>
                    <set field="hasPermission" type="Boolean" value="false"/>
                </then>
            </if>
        </iterate>

        <field-to-result field="hasPermission"/>
        <field-to-result field="failMessage"/>
    </simple-method>

    <!-- To help dynamically populate a products dropdown given a product category id from a change in another dropdown, possibly sorted on sequenceNum -->
    <simple-method method-name="getAssociatedProductsList" short-description="Set the product options for selected product category, mostly used by getDependentDropdownValues" login-required="false">
        <set field="parameters.categoryId" from-field="parameters.productCategoryId"/>
        <set-service-fields service-name="getProductCategoryMembers" map="parameters" to-map="getProductCategoryMembersMap"/>
        <call-service service-name="getProductCategoryMembers" in-map-name="getProductCategoryMembersMap">
            <result-to-field result-name="categoryMembers" field="productsList"/>
        </call-service>
        <order-map-list list="productsList">
            <order-by field-name="sequenceNum"/>
        </order-map-list>
        <iterate list="productsList" entry="productMember">
            <entity-one entity-name="Product" value-field="product">
                <field-map field-name="productId" from-field="productMember.productId"/>
            </entity-one>
            <set field="productName" value="${product.internalName}: ${product.productId}"/>
            <field-to-list list="products" field="productName"/>
        </iterate>
        <if-empty field="products">
            <property-to-field resource="ProductUiLabels" property="ProductNoProducts" field="noOption"/>
            <field-to-list list="products" field="noOption"/>
        </if-empty>
        <field-to-result field="products"/>
    </simple-method>

    <!-- Load data of best selling category -->
    <simple-method method-name="loadBestSellingCategory" short-description="Load data of best selling category by week.">
        <now-date-to-env field="nowDate"/>
        <set field="week" value="${groovy: import java.util.Calendar;
            Calendar cal = Calendar.getInstance();
            cal.setTime(nowDate);
            return cal.get(Calendar.WEEK_OF_YEAR);}" type="Long"/>
        <set field="year" value="${groovy: import java.util.Calendar;
            Calendar cal = Calendar.getInstance();
            cal.setTime(nowDate);
            int aa = cal.get(Calendar.YEAR);
            return aa;}" type="Long"/>
        <if-compare field="week" operator="equals" value="1">
            <set field="week" value="52"/>
        <else>
            <calculate field="week">
                <calcop operator="subtract" field="week">
                    <number value="1"/>
                </calcop>
            </calculate>
            <if-compare field="week" operator="equals" value="1">
                <calculate field="year">
                    <calcop operator="subtract" field="year">
                        <number value="1"/>
                    </calcop>
                </calculate>
            </if-compare>
        </else>
        </if-compare>

        <entity-and entity-name="ProductStoreCatalog" list="productStoreCatalogs" filter-by-date="true">
            <field-map field-name="productStoreId" from-field="parameters.productStoreId"/>
        </entity-and>
        <if-not-empty field="productStoreCatalogs">
            <first-from-list list="productStoreCatalogs" entry="productStoreCatalog"/>
            <set field="callRemoveProductMap.prodCatalogId" from-field="productStoreCatalog.prodCatalogId"/>
            <call-service service-name="RemoveProductFromBestSellCategory" in-map-name="callRemoveProductMap"/>

            <set field="callAddProductMap.productStoreId" from-field="parameters.productStoreId"/>
            <set field="callAddProductMap.prodCatalogId" from-field="productStoreCatalog.prodCatalogId"/>
            <set field="callAddProductMap.week" from-field="week" type="Long"/>
            <set field="callAddProductMap.year" from-field="year" type="Long"/>
            <call-service service-name="AddProductToBestSellCategory" in-map-name="callAddProductMap"/>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="RemoveProductFromBestSellCategory" short-description="Remove products from best selling category.">
        <entity-and entity-name="ProdCatalogCategory" list="prodCatalogCategorys">
            <field-map field-name="prodCatalogId" from-field="parameters.prodCatalogId"/>
            <field-map field-name="prodCatalogCategoryTypeId" value="PCCT_BEST_SELL"/>
        </entity-and>
        <iterate list="prodCatalogCategorys" entry="prodCatalogCategory">
            <entity-and entity-name="ProductCategoryRollup" list="productCategoryRollups">
                <field-map field-name="parentProductCategoryId" from-field="prodCatalogCategory.productCategoryId"/>
            </entity-and>
            <iterate list="productCategoryRollups" entry="productCategoryRollup">
                <entity-and entity-name="ProductCategoryMember" list="productCategoryMembers">
                    <field-map field-name="productCategoryId" from-field="productCategoryRollup.productCategoryId"/>
                </entity-and>
                <iterate list="productCategoryMembers" entry="productCategoryMember">
                    <remove-value value-field="productCategoryMember"/>
                </iterate>
            </iterate>
        </iterate>
    </simple-method>

    <simple-method method-name="AddProductToBestSellCategory" short-description="Add products to best selling category.">
        <entity-and entity-name="ProdCatalogCategory" list="prodCatalogCategorys">
            <field-map field-name="prodCatalogId" from-field="parameters.prodCatalogId"/>
            <field-map field-name="prodCatalogCategoryTypeId" value="PCCT_BEST_SELL"/>
        </entity-and>
        <first-from-list list="prodCatalogCategorys" entry="prodCatalogCategory"/>
        <entity-and entity-name="ProductCategoryRollup" list="productCategoryRollupList">
            <field-map field-name="parentProductCategoryId" from-field="prodCatalogCategory.productCategoryId"/>
        </entity-and>
        <iterate list="productCategoryRollupList" entry="productCategoryRollup">
            <set-service-fields service-name="FindCategoryChild" map="parameters" to-map="CategoryChildMap"/>
            <set field="CategoryChildMap.productCategoryId" from-field="productCategoryRollup.productCategoryId"/>
            <set field="CategoryChildMap.primaryProductCategoryId" from-field="productCategoryRollup.productCategoryId"/>
            <call-service service-name="FindCategoryChild" in-map-name="CategoryChildMap"/>
        </iterate>
    </simple-method>

    <simple-method method-name="FindCategoryChild" short-description="Find category child.">
        <entity-and entity-name="ProductCategoryRollup" list="productCategoryRollupList">
            <field-map field-name="parentProductCategoryId" from-field="parameters.productCategoryId"/>
        </entity-and>
        <if-empty field="productCategoryRollupList">
            <set-service-fields service-name="FindBestSellingProduct" map="parameters" to-map="AddProductMap"/>
            <set field="AddProductMap.productCategoryId" from-field="parameters.productCategoryId"/>
            <call-service service-name="FindBestSellingProduct" in-map-name="AddProductMap"/>
        <else>
            <iterate list="productCategoryRollupList" entry="productCategoryRollup">
                <set-service-fields service-name="FindCategoryChild" map="parameters" to-map="CategoryChildMap"/>
                <set field="CategoryChildMap.productCategoryId" from-field="productCategoryRollup.productCategoryId"/>
                <call-service service-name="FindCategoryChild" in-map-name="CategoryChildMap"/>
            </iterate>
        </else>
        </if-empty>
    </simple-method>

    <simple-method method-name="FindBestSellingProduct" short-description="Find best selling product.">
        <now-timestamp field="nowTimestamp"/>
        <entity-and entity-name="ProductCategoryMember" list="productCategoryMembers" filter-by-date="true">
            <field-map field-name="productCategoryId" from-field="parameters.productCategoryId"/>
        </entity-and>
        <iterate list="productCategoryMembers" entry="productCategoryMember">
            <!-- SCIPIO: SalesOrderItemStarSchema may be unavailable - but don't crash -->
            <script lang="groovy"><![CDATA[
                entityDefined = false;
                try {
                    modelEntity = delegator.getModelReader().getModelEntity("SalesOrderItemStarSchema");
                    if (modelEntity) {
                        entityDefined = true;
                    }
                } catch(Exception e) {
                }
                context.entityDefined = entityDefined;
            ]]></script>
            <if>
                <condition><if-compare field="entityDefined" operator="equals" type="Boolean" value="false"/></condition>
                <then>
                    <log level="warning" message="No best-selling products can be returned using 'FindBestSellingProduct' service; entity SalesOrderItemStarSchema does not exist"/>
                    <return/>
                </then>
            </if>
            <entity-condition entity-name="SalesOrderItemStarSchema" list="salesOrderItemStarSchemas" distinct="true">
                <condition-list combine="and">
                    <condition-expr field-name="productProductId" operator="equals" from-field="productCategoryMember.productId"/>
                    <condition-expr field-name="productStoreId" operator="equals" from-field="parameters.productStoreId"/>
                    <condition-expr field-name="orderDateWeekOfYear" operator="equals" from-field="parameters.week"/>
                    <condition-expr field-name="orderDateYearName" operator="equals" from-field="parameters.year"/>
                </condition-list>
            </entity-condition>
            <if-not-empty field="salesOrderItemStarSchemas">
                <first-from-list list="salesOrderItemStarSchemas" entry="salesOrderItemStarSchema"/>
                <make-value entity-name="ProductCategoryMember" value-field="newEntity"/>
                <set field="newEntity.productCategoryId" from-field="parameters.primaryProductCategoryId"/>
                <set field="newEntity.productId" from-field="salesOrderItemStarSchema.productProductId"/>
                <set field="newEntity.fromDate" from-field="nowTimestamp"/>
                <set field="newEntity.quantity" from-field="salesOrderItemStarSchema.quantity"/>
                <create-value value-field="newEntity"/>
            </if-not-empty>
        </iterate>
    </simple-method>

    <!-- ================================================================ -->
    <!-- SCIPIO: NEW Services (with stock-like functionality) -->
    <!-- ================================================================ -->

    <simple-method method-name="createProdCatalogAndStoreAssoc">
        <set-service-fields service-name="createProdCatalog" map="parameters" to-map="createRecordCtx"/>
        <call-service service-name="createProdCatalog" in-map-name="createRecordCtx">
            <result-to-field result-name="prodCatalogId" field="parameters.prodCatalogId"/>
            <result-to-result result-name="prodCatalogId"/>
        </call-service>

        <set-service-fields service-name="createProductStoreCatalog" map="parameters" to-map="createAssocCtx"/>
        <call-service service-name="createProductStoreCatalog" in-map-name="createAssocCtx">
            <result-to-result result-name="productStoreId"/>
            <result-to-result result-name="fromDate"/>
        </call-service>
    </simple-method>

    <simple-method method-name="updateProdCatalogAndStoreAssoc">
        <set-service-fields service-name="updateProdCatalog" map="parameters" to-map="updateRecordCtx"/>
        <call-service service-name="updateProdCatalog" in-map-name="updateRecordCtx"/>

        <set-service-fields service-name="updateProductStoreCatalog" map="parameters" to-map="updateAssocCtx"/>
        <call-service service-name="updateProductStoreCatalog" in-map-name="updateAssocCtx"/>
    </simple-method>

    <simple-method method-name="deleteProdCatalogAndStoreAssoc">
        <set-service-fields service-name="deleteProductStoreCatalog" map="parameters" to-map="deleteAssocCtx"/>
        <call-service service-name="deleteProductStoreCatalog" in-map-name="deleteAssocCtx"/>

        <set-service-fields service-name="deleteProdCatalog" map="parameters" to-map="deleteRecordCtx"/>
        <call-service service-name="deleteProdCatalog" in-map-name="deleteRecordCtx"/>
    </simple-method>

    <simple-method method-name="createProductCategoryAndCatalogAssoc">
        <set-service-fields service-name="createProductCategory" map="parameters" to-map="createRecordCtx"/>
        <call-service service-name="createProductCategory" in-map-name="createRecordCtx">
            <result-to-field result-name="productCategoryId" field="parameters.productCategoryId"/>
            <result-to-result result-name="productCategoryId"/>
        </call-service>

        <set-service-fields service-name="addProductCategoryToProdCatalog" map="parameters" to-map="createAssocCtx"/>
        <call-service service-name="addProductCategoryToProdCatalog" in-map-name="createAssocCtx">
            <result-to-result result-name="prodCatalogId"/>
            <result-to-result result-name="prodCatalogCategoryTypeId"/>
            <result-to-result result-name="fromDate"/>
        </call-service>
    </simple-method>

    <simple-method method-name="createProductCategoryAndCategoryAssoc">
        <set-service-fields service-name="createProductCategory" map="parameters" to-map="createRecordCtx"/>
        <call-service service-name="createProductCategory" in-map-name="createRecordCtx">
            <result-to-field result-name="productCategoryId" field="parameters.productCategoryId"/>
            <result-to-result result-name="productCategoryId"/>
        </call-service>

        <set-service-fields service-name="addProductCategoryToCategory" map="parameters" to-map="createAssocCtx"/>
        <call-service service-name="addProductCategoryToCategory" in-map-name="createAssocCtx">
            <result-to-result result-name="parentProductCategoryId"/>
            <result-to-result result-name="fromDate"/>
        </call-service>
    </simple-method>

    <simple-method method-name="updateProductCategoryAndCatalogAssoc">
        <set-service-fields service-name="updateProductCategory" map="parameters" to-map="updateRecordCtx"/>
        <call-service service-name="updateProductCategory" in-map-name="updateRecordCtx"/>

        <set-service-fields service-name="updateProductCategoryToProdCatalog" map="parameters" to-map="updateAssocCtx"/>
        <call-service service-name="updateProductCategoryToProdCatalog" in-map-name="updateAssocCtx"/>
    </simple-method>

    <simple-method method-name="updateProductCategoryAndCategoryAssoc">
        <set-service-fields service-name="updateProductCategory" map="parameters" to-map="updateRecordCtx"/>
        <call-service service-name="updateProductCategory" in-map-name="updateRecordCtx"/>

        <set-service-fields service-name="updateProductCategoryToCategory" map="parameters" to-map="updateAssocCtx"/>
        <call-service service-name="updateProductCategoryToCategory" in-map-name="updateAssocCtx"/>
    </simple-method>


    <!-- ================================================================ -->
    <!-- SCIPIO: NEW Versatile Services (with stock-like functionality) -->
    <!-- ================================================================ -->

    <simple-method method-name="createProductCategoryAndCatAssocVersatile">
        <if-empty field="parameters.parentProductCategoryId">
            <set-service-fields service-name="createProductCategoryAndCatalogAssoc" map="parameters" to-map="createCtx"/>
            <call-service service-name="createProductCategoryAndCatalogAssoc" in-map-name="createCtx">
                <result-to-result result-name="productCategoryId"/>
                <result-to-result result-name="prodCatalogId"/>
                <result-to-result result-name="prodCatalogCategoryTypeId"/>
                <result-to-result result-name="fromDate"/>
                <result-to-field result-name="productCategoryId" field="parameters.productCategoryId"/>
            </call-service>
            <else>
                <set-service-fields service-name="createProductCategoryAndCategoryAssoc" map="parameters" to-map="createCtx"/>
                <call-service service-name="createProductCategoryAndCategoryAssoc" in-map-name="createCtx">
                    <result-to-result result-name="productCategoryId"/>
                    <result-to-result result-name="parentProductCategoryId"/>
                    <result-to-result result-name="fromDate"/>
                    <result-to-field result-name="productCategoryId" field="parameters.productCategoryId"/>
                </call-service>
            </else>
        </if-empty>
        <if-compare field="parameters.updateLocalizedTexts" type="Boolean" operator="equals" value="true">
            <set-service-fields service-name="replaceProductCategoryContentLocalizedSimpleTexts" map="parameters" to-map="updateLocTextCtx"/>
            <call-service service-name="replaceProductCategoryContentLocalizedSimpleTexts" in-map-name="updateLocTextCtx"/>
        </if-compare>
    </simple-method>

    <simple-method method-name="updateProductCategoryAndCatAssocVersatile">
        <if-empty field="parameters.parentProductCategoryId">
            <set-service-fields service-name="updateProductCategoryAndCatalogAssoc" map="parameters" to-map="updateCtx"/>
            <call-service service-name="updateProductCategoryAndCatalogAssoc" in-map-name="updateCtx"/>
            <else>
                <set-service-fields service-name="updateProductCategoryAndCategoryAssoc" map="parameters" to-map="updateCtx"/>
                <call-service service-name="updateProductCategoryAndCategoryAssoc" in-map-name="updateCtx"/>
            </else>
        </if-empty>
        <if-compare field="parameters.updateLocalizedTexts" type="Boolean" operator="equals" value="true">
            <set-service-fields service-name="replaceProductCategoryContentLocalizedSimpleTexts" map="parameters" to-map="updateLocTextCtx"/>
            <call-service service-name="replaceProductCategoryContentLocalizedSimpleTexts" in-map-name="updateLocTextCtx"/>
        </if-compare>
    </simple-method>

    <simple-method method-name="deleteProductCategoryCatAssocVersatile">
        <if-empty field="parameters.parentProductCategoryId">
            <if-compare field="parameters.deleteAssocMode" operator="equals" value="expire">
                <!-- FIXME?: check if already expired?? -->
                <set-service-fields service-name="updateProductCategoryToProdCatalog" map="parameters" to-map="updateCtx"/>
                <now-timestamp field="updateCtx.thruDate"/>
                <call-service service-name="updateProductCategoryToProdCatalog" in-map-name="updateCtx"/>
                <else>
                    <set-service-fields service-name="removeProductCategoryFromProdCatalog" map="parameters" to-map="removeCtx"/>
                    <call-service service-name="removeProductCategoryFromProdCatalog" in-map-name="removeCtx"/>
                </else>
            </if-compare>
            <else>
                <if-compare field="parameters.deleteAssocMode" operator="equals" value="expire">
                    <!-- FIXME?: check if already expired?? -->
                    <set-service-fields service-name="updateProductCategoryToCategory" map="parameters" to-map="updateCtx"/>
                    <now-timestamp field="updateCtx.thruDate"/>
                    <call-service service-name="updateProductCategoryToCategory" in-map-name="updateCtx"/>
                    <else>
                        <set-service-fields service-name="removeProductCategoryFromCategory" map="parameters" to-map="removeCtx"/>
                        <call-service service-name="removeProductCategoryFromCategory" in-map-name="removeCtx"/>
                    </else>
                </if-compare>
            </else>
        </if-empty>
    </simple-method>

    <simple-method method-name="deleteProductCategoryAndRelatedVersatile">
        <set field="callingMethodName" value="deleteProductCategoryAndRelatedVersatile"/>
        <set field="checkAction" value="DELETE"/>
        <call-simple-method method-name="checkCategoryRelatedPermission"/>
        <check-errors/>

        <entity-one entity-name="ProductCategory" value-field="productCategory"/>
        <if-empty field="productCategory">
            <property-to-field resource="ProductUiLabels" property="ProductCategoryNotFoundForCategoryID" field="errMsgStr" />
            <add-error><fail-message message="${errMsgStr}: ${parameters.productCategoryId}"/></add-error>
            <check-errors/>
        </if-empty>

        <set field="prodCatIdMap.productCategoryId" from-field="parameters.productCategoryId"/>

        <!--
            !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            SCIPIO: 2017-10-31: WARN: This service is WIP and may be dangerous - currently best-effort only
            !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        -->

        <remove-by-and entity-name="ProductCategoryAttribute" map="prodCatIdMap"/>
        <remove-by-and entity-name="ProductCategoryLink" map="prodCatIdMap"/>
        <remove-by-and entity-name="ProductCategoryRole" map="prodCatIdMap"/>
        <remove-by-and entity-name="ProductFeatureCategoryAppl" map="prodCatIdMap"/>
        <remove-by-and entity-name="ProductFeatureCatGrpAppl" map="prodCatIdMap"/>
        <remove-by-and entity-name="ProductPromoCategory" map="prodCatIdMap"/><!-- TODO: REVIEW -->

        <set field="assocContentFilterByDate" set-if-null="true" value=""/>
        <if-compare field="parameters.deleteContentRecursive" operator="equals" value="all">
            <set field="assocContentFilterByDate" value="false"/>
            <else>
                <if-compare field="parameters.deleteContentRecursive" operator="equals" value="active">
                    <set field="assocContentFilterByDate" value="true"/>
                </if-compare>
            </else>
        </if-compare>
        <if-not-empty field="assocContentFilterByDate">
            <entity-condition entity-name="ProductCategoryContent" list="recursiveContentList" filter-by-date="${assocContentFilterByDate}">
                <condition-list combine="and">
                    <condition-expr field-name="productCategoryId" from-field="prodCatIdMap.productCategoryId"/>
                    <!-- TODO: which types to filter?
                    <condition-list combine="or">
                        <!- - TODO: these should be configurable as a service list parameter... - ->
                    </condition-list>
                     -->
                </condition-list>
            </entity-condition>
            <iterate list="recursiveContentList" entry="prodCatContent">
                <set field="contentRemoveCtx" set-if-null="true" value=""/>
                <set field="contentRemoveCtx.contentId" from-field="prodCatContent.contentId"/>
                <set field="contentRemoveCtx.recursiveTarget" from-field="parameters.deleteContentRecursive"/>
                <remove-value value-field="prodCatContent"/>
                <check-errors/>
                <call-service service-name="removeContentAndRelatedRecursiveTo" in-map-name="contentRemoveCtx"/>
            </iterate>
        </if-not-empty>
        <remove-by-and entity-name="ProductCategoryContent" map="prodCatIdMap"/>

        <if-compare field="parameters.deleteParentAssocSelect" operator="equals" value="expired">
            <entity-and entity-name="ProdCatalogCategory" list="values" filter-by-date="true">
                <field-map field-name="productCategoryId" from-field="prodCatIdMap.productCategoryId"/>
            </entity-and>
            <remove-list list="values"/>
            <entity-and entity-name="ProductCategoryRollup" list="values" filter-by-date="true">
                <field-map field-name="productCategoryId" from-field="prodCatIdMap.productCategoryId"/>
            </entity-and>
            <remove-list list="values"/>
        </if-compare>
        <if-compare field="parameters.deleteParentAssocSelect" operator="equals" value="all">
            <remove-by-and entity-name="ProdCatalogCategory" map="prodCatIdMap"/>
            <remove-by-and entity-name="ProductCategoryRollup" map="prodCatIdMap"/>
        </if-compare>

        <if-compare field="parameters.deleteChildrenSelect" operator="equals" value="recursive">
            <!-- TODO?: This will be very destructive... remove related:
                ProductCategory
                Product (NOTE: primaryProductCategoryId field)
            -->
        </if-compare>

        <if-compare field="parameters.deleteChildAssocSelect" operator="equals" value="expired">
            <entity-and entity-name="ProductCategoryMember" list="values" filter-by-date="true">
                <field-map field-name="productCategoryId" from-field="prodCatIdMap.productCategoryId"/>
            </entity-and>
            <remove-list list="values"/>
            <entity-and entity-name="ProductCategoryRollup" list="values" filter-by-date="true">
                <field-map field-name="parentProductCategoryId" from-field="prodCatIdMap.productCategoryId"/>
            </entity-and>
            <remove-list list="values"/>
        </if-compare>
        <if-compare field="parameters.deleteChildAssocSelect" operator="equals" value="all">
            <remove-by-and entity-name="ProductCategoryMember" map="prodCatIdMap"/>
            <set field="parentProdCatIdMap.productCategoryId" from-field="parameters.productCategoryId"/>
            <remove-by-and entity-name="ProductCategoryRollup" map="parentProdCatIdMap"/>
        </if-compare>

        <!-- TODO: REVIEW: all these may be destructive -->
        <if-compare field="parameters.deleteSpecialAssocSelect" operator="equals" value="expired">
            <!-- <remove-by-and entity-name="TaxAuthorityCategory" map="prodCatIdMap"/> TODO: REVIEW -->
            <entity-and entity-name="TaxAuthorityRateProduct" list="values" filter-by-date="true">
                <field-map field-name="productCategoryId" from-field="prodCatIdMap.productCategoryId"/>
            </entity-and>
            <remove-list list="values"/>

            <!--<remove-by-and entity-name="ProductCategoryGlAccount" map="prodCatIdMap"/> TODO: REVIEW -->

            <entity-and entity-name="MarketInterest" list="values" filter-by-date="true">
                <field-map field-name="productCategoryId" from-field="prodCatIdMap.productCategoryId"/>
            </entity-and>
            <remove-list list="values"/>
            <!--<remove-by-and entity-name="SalesForecastDetail" map="prodCatIdMap"/> TODO: REVIEW -->
            <!--<remove-by-and entity-name="PartyNeed" map="prodCatIdMap"/> TODO: REVIEW -->

            <entity-and entity-name="ProductStoreSurveyAppl" list="values" filter-by-date="true">
                <field-map field-name="productCategoryId" from-field="prodCatIdMap.productCategoryId"/>
            </entity-and>
            <remove-list list="values"/>

            <entity-and entity-name="Subscription" list="values" filter-by-date="true">
                <field-map field-name="productCategoryId" from-field="prodCatIdMap.productCategoryId"/>
            </entity-and>
            <remove-list list="values"/>
        </if-compare>
        <if-compare field="parameters.deleteSpecialAssocSelect" operator="equals" value="all">
            <remove-by-and entity-name="TaxAuthorityCategory" map="prodCatIdMap"/>
            <remove-by-and entity-name="TaxAuthorityRateProduct" map="prodCatIdMap"/>

            <remove-by-and entity-name="ProductCategoryGlAccount" map="prodCatIdMap"/>

            <remove-by-and entity-name="SalesForecastDetail" map="prodCatIdMap"/>
            <remove-by-and entity-name="MarketInterest" map="prodCatIdMap"/>
            <remove-by-and entity-name="PartyNeed" map="prodCatIdMap"/>

            <remove-by-and entity-name="ProductStoreSurveyAppl" map="prodCatIdMap"/>

            <remove-by-and entity-name="Subscription" map="prodCatIdMap"/><!-- TODO: REVIEW: TOO DESTRUCTIVE? -->
        </if-compare>

        <!-- we wrote this so we know what it does
        <set-service-fields service-name="deleteProductCategory" map="parameters" to-map="deleteRecordCtx"/>
        <call-service service-name="deleteProductCategory" in-map-name="deleteRecordCtx"/>-->
        <remove-value value-field="productCategory"/>
    </simple-method>

    <simple-method method-name="deleteProductCategoryAndCatAssocVersatile">
        <set-service-fields service-name="deleteProductCategoryCatAssocVersatile" map="parameters" to-map="deleteAssocCtx"/>
        <call-service service-name="deleteProductCategoryCatAssocVersatile" in-map-name="deleteAssocCtx"/>

        <if-compare field="parameters.deleteRecordAndRelated" operator="not-equals" type="Boolean" value="false">
            <set-service-fields service-name="deleteProductCategoryAndRelatedVersatile" map="parameters" to-map="deleteRecordCtx"/>
            <call-service service-name="deleteProductCategoryAndRelatedVersatile" in-map-name="deleteRecordCtx"/>
        </if-compare>
    </simple-method>

    <simple-method method-name="addProductCategoryCatAssocVersatile">
        <if-empty field="parameters.parentProductCategoryId">
            <if-empty field="parameters.prodCatalogId"><!-- if don't enforce this here, the assocList could produce confusing message -->
                <set field="missingFieldName" value="prodCatalogId"/>
                <add-error><fail-property resource="CommonErrorUiLabels" property="CommonMissingFieldWithName"/></add-error>
                <check-errors/>
            </if-empty>
            <!-- check if ProdCatalogCategory already exists (ignoring fromDate) -->
            <entity-and entity-name="ProdCatalogCategory" list="assocList" filter-by-date="true">
                <field-map field-name="productCategoryId" from-field="parameters.productCategoryId"/>
                <field-map field-name="prodCatalogId" from-field="parameters.prodCatalogId"/>
                <!-- TODO/FIXME: REVIEW: prodCatalogCategoryTypeId is part of the PK, but currently we have to avoid
                    having multiple catalog-category assoc because the tree can't handle it
                <field-map field-name="prodCatalogCategoryTypeId" from-field="parameters.prodCatalogCategoryTypeId"/>-->
            </entity-and>
            <if-not-empty field="assocList">
                <add-error><fail-property resource="ProductErrorUiLabels" property="productservices.could_not_create_catalog_category_assoc_association_exists"/></add-error>
                <check-errors/>
            </if-not-empty>

            <set-service-fields service-name="addProductCategoryToProdCatalog" map="parameters" to-map="createAssocCtx"/>
            <call-service service-name="addProductCategoryToProdCatalog" in-map-name="createAssocCtx">
                <result-to-result result-name="productCategoryId"/>
                <result-to-result result-name="prodCatalogId"/>
                <result-to-result result-name="prodCatalogCategoryTypeId"/>
                <result-to-result result-name="fromDate"/>
            </call-service>
            <else>
                <!-- check if ProductCategoryRollup already exists (ignoring fromDate) -->
                <entity-and entity-name="ProductCategoryRollup" list="assocList" filter-by-date="true">
                    <field-map field-name="productCategoryId" from-field="parameters.productCategoryId"/>
                    <field-map field-name="parentProductCategoryId" from-field="parameters.parentProductCategoryId"/>
                </entity-and>
                <if-not-empty field="assocList">
                    <add-error><fail-property resource="ProductErrorUiLabels" property="productservices.could_not_create_category_category_assoc_association_exists"/></add-error>
                    <check-errors/>
                </if-not-empty>

                <set-service-fields service-name="addProductCategoryToCategory" map="parameters" to-map="createAssocCtx"/>
                <call-service service-name="addProductCategoryToCategory" in-map-name="createAssocCtx">
                    <result-to-result result-name="productCategoryId"/>
                    <result-to-result result-name="parentProductCategoryId"/>
                    <result-to-result result-name="fromDate"/>
                </call-service>
            </else>
        </if-empty>
    </simple-method>

    <simple-method method-name="copyProductCategoryCatAssocVersatile">
        <!-- common -->
        <set field="addAssocCtx.productCategoryId" from-field="parameters.productCategoryId"/>
        <set field="addAssocCtx.fromDate" from-field="parameters.to_fromDate"/>
        <set field="addAssocCtx.sequenceNum" from-field="parameters.to_sequenceNum"/>
        <!-- ProdCatalogCategory -->
        <set field="addAssocCtx.prodCatalogId" from-field="parameters.to_prodCatalogId"/>
        <set field="addAssocCtx.prodCatalogCategoryTypeId" from-field="parameters.to_prodCatalogCategoryTypeId"/>
        <!-- ProductCategoryRollup -->
        <set field="addAssocCtx.parentProductCategoryId" from-field="parameters.to_parentProductCategoryId"/>
        <call-service service-name="addProductCategoryCatAssocVersatile" in-map-name="addAssocCtx">
            <result-to-field result-name="productCategoryId" field="resultFields.productCategoryId"/>
            <result-to-field result-name="fromDate" field="resultFields.fromDate"/>
            <result-to-field result-name="sequenceNum" field="resultFields.sequenceNum"/>
            <result-to-field result-name="prodCatalogId" field="resultFields.prodCatalogId"/>
            <result-to-field result-name="prodCatalogCategoryTypeId" field="resultFields.prodCatalogCategoryTypeId"/>
            <result-to-field result-name="parentProductCategoryId" field="resultFields.parentProductCategoryId"/>
        </call-service>

        <field-to-result field="resultFields.productCategoryId" result-name="productCategoryId"/>
        <if-compare field="parameters.returnAssocFields" operator="equals" type="Boolean" value="true">
            <field-to-result field="resultFields.fromDate" result-name="fromDate"/>
            <field-to-result field="resultFields.sequenceNum" result-name="sequenceNum"/>
            <field-to-result field="resultFields.prodCatalogId" result-name="prodCatalogId"/>
            <field-to-result field="resultFields.prodCatalogCategoryTypeId" result-name="prodCatalogCategoryTypeId"/>
            <field-to-result field="resultFields.parentProductCategoryId" result-name="parentProductCategoryId"/>
        </if-compare>
        <field-to-result field="resultFields.productCategoryId" result-name="to_productCategoryId"/>
        <field-to-result field="resultFields.fromDate" result-name="to_fromDate"/>
        <field-to-result field="resultFields.sequenceNum" result-name="to_sequenceNum"/>
        <field-to-result field="resultFields.prodCatalogId" result-name="to_prodCatalogId"/>
        <field-to-result field="resultFields.prodCatalogCategoryTypeId" result-name="to_prodCatalogCategoryTypeId"/>
        <field-to-result field="resultFields.parentProductCategoryId" result-name="to_parentProductCategoryId"/>
    </simple-method>

    <simple-method method-name="moveProductCategoryCatAssocVersatile">
        <set-service-fields service-name="deleteProductCategoryCatAssocVersatile" map="parameters" to-map="deleteAssocCtx"/>
        <call-service service-name="deleteProductCategoryCatAssocVersatile" in-map-name="deleteAssocCtx"/>

        <!-- move is simply delete + copy for us -->
        <call-simple-method method-name="copyProductCategoryCatAssocVersatile"/>
        <check-errors/>
    </simple-method>

    <simple-method method-name="getProductCategoryExtendedDataVersatile">
        <entity-one entity-name="ProductCategory" value-field="productCategory"/>
        <field-to-result field="productCategory"/>
        <if-empty field="productCategory">
            <property-to-field resource="ProductUiLabels" property="ProductCategoryNotFoundForCategoryID" field="errMsgStr" />
            <add-error><fail-message message="${errMsgStr}: ${parameters.productCategoryId}"/></add-error>
            <check-errors/>
        </if-empty>

        <set-service-fields service-name="getProductCategoryContentLocalizedSimpleTextViews" map="parameters" to-map="locTextCtx"/>
        <call-service service-name="getProductCategoryContentLocalizedSimpleTextViews" in-map-name="locTextCtx">
            <result-to-result result-name="viewsByType"/>
            <result-to-result result-name="viewsByTypeAndLocale"/>
            <result-to-result result-name="textByTypeAndLocale"/>
        </call-service>
    </simple-method>

</simple-methods>
